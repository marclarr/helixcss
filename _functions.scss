@charset "UTF-8";

///
// Mixes a color with black.
///

@function shade( $color, $percent ) {
    @return mix( #000, $color, $percent );
}

///
// Mixes a color with white.
///

@function tint( $color, $percent ) {
    @return mix( #fff, $color, $percent );
}

///
// Test if `$value` is a valid CSS3 gradient direction.
//
// Source: sitepoint.com/building-linear-gradient-mixin-sass/
//
// @param {*} $value - Value to test
// @return {bool}
///

@function _is-direction( $value ) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

    @return $is-keyword or $is-angle;
}

///
// Convert a direction to legacy syntax for older CSS3 gradients.
//
// Source: sitepoint.com/building-linear-gradient-mixin-sass/
//
// @require {function} is-direction
// @param {keyword | angle} $value - Value to convert
// @return {string} legacy direction
///

@function _legacy-direction( $value ) {

    @if is-direction( $value ) == false {
        @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }

    $conversion-map: (
        to top          : bottom,
        to top right    : bottom left,
        to right top    : left bottom,
        to right        : left,
        to bottom right : top left,
        to right bottom : left top,
        to bottom       : top,
        to bottom left  : top right,
        to left bottom  : right top,
        to left         : right,
        to left top     : right bottom,
        to top left     : bottom right
    );

    @if map-has-key( $conversion-map, $value ) {
        @return map-get( $conversion-map, $value );
    }

    @return 90deg - $value;
}

///
// Prefixes a single property.
//
// @param {$properties} Single property (e.g. transform).
// @param {$vendor} Only one vendor prefix (e.g. moz) accepted per function call.
///

@function _prefix-property( $property, $vendor:false ) {

    @if $vendor and $property == transform {
        @return unquote('-'+$vendor+'-'+$property);
    }
    @else {
        @return $property;
    }
}

///
// Prefixes multiple properties.
//
// @require {function} _prefix-property
// @param {$properties} Single property or comma separated list of properties.
// @param {$vendor} Only one vendor prefix accepted per function call.
///

@function _prefix-properties( $properties, $vendor:false ) {

    $return: ();

    @each $p in $properties {
        $return: append( $return, _prefix-property($p,$vendor), comma);
    }

    @return $return;
}
