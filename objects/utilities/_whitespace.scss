@charset "UTF-8";

$_spaces: $space1 $space2 $space3 $space4;
$_spaces_count: length($_spaces);

@mixin _multi_whitespace_margin_css( $i, $breakpoint:'' ) {
    .#{$ns}m#{$i}#{$breakpoint} { margin: nth($_spaces,$i) !important; }
    .#{$ns}mx#{$i}#{$breakpoint} { margin-left: nth($_spaces,$i) !important; margin-right: nth($_spaces,$i) !important; }
    .#{$ns}my#{$i}#{$breakpoint} { margin-top: nth($_spaces,$i) !important; margin-bottom: nth($_spaces,$i) !important; }
}

@mixin _whitespace_margin_css( $i, $breakpoint:'' ) {
    .#{$ns}mt#{$i}#{$breakpoint} { margin-top: nth($_spaces,$i) !important; }
    .#{$ns}mr#{$i}#{$breakpoint} { margin-right: nth($_spaces,$i) !important; }
    .#{$ns}mb#{$i}#{$breakpoint} { margin-bottom: nth($_spaces,$i) !important; }
    .#{$ns}ml#{$i}#{$breakpoint} { margin-left: nth($_spaces,$i) !important; }
}

@mixin _multi_whitespace_padding_css( $i, $breakpoint:'' ) {
    .#{$ns}p#{$i}#{$breakpoint} { padding: nth($_spaces,$i) !important; }
    .#{$ns}px#{$i}#{$breakpoint} { padding-left: nth($_spaces,$i) !important; padding-right: nth($_spaces,$i) !important; }
    .#{$ns}py#{$i}#{$breakpoint} { padding-top: nth($_spaces,$i) !important; padding-bottom: nth($_spaces,$i) !important; }
}

@mixin _whitespace_padding_css( $i, $breakpoint:'' ) {
    .#{$ns}pt#{$i}#{$breakpoint} { padding-top: nth($_spaces,$i) !important; }
    .#{$ns}pr#{$i}#{$breakpoint} { padding-right: nth($_spaces,$i) !important; }
    .#{$ns}pb#{$i}#{$breakpoint} { padding-bottom: nth($_spaces,$i) !important; }
    .#{$ns}pl#{$i}#{$breakpoint} { padding-left: nth($_spaces,$i) !important; }
}

@mixin _whitespace_vertical_rhythm( $breakpoint:'' ) {
    .#{$ns}vr25#{$breakpoint} { margin-bottom: $vr / 4 !important; }
    .#{$ns}vr50#{$breakpoint} { margin-bottom: $vr / 2 !important; }
    .#{$ns}vr75#{$breakpoint} { margin-bottom: $vr / 1.333333 !important; }
    .#{$ns}vr100#{$breakpoint},
    .#{$ns}vr#{$breakpoint} { margin-bottom: $vr !important; }
    .#{$ns}vr125#{$breakpoint} { margin-bottom: $vr * 1.25 !important; }
    .#{$ns}vr150#{$breakpoint} { margin-bottom: $vr * 1.5 !important; }
    .#{$ns}vr175#{$breakpoint} { margin-bottom: $vr * 1.75 !important; }
    .#{$ns}vr200#{$breakpoint} { margin-bottom: $vr * 2 !important; }
}

@if $export_whitespace {

/*
Vertical Rhythm
*/

@include _whitespace_vertical_rhythm;

@include md {
    @include _whitespace_vertical_rhythm( '-m' );
}

@include md-lg {
    @include _whitespace_vertical_rhythm( '-ml' );
}

@include lg {
    @include _whitespace_vertical_rhythm( '-l' );
}

/*
Margin
*/

.#{$ns}mb0 { margin-bottom: 0 !important; }
.#{$ns}m0 { margin: 0 !important; }
.#{$ns}mxauto, .#{$ns}mxa {
    margin-left: auto !important;
    margin-right: auto !important;
}
.#{$ns}mi { margin: inherit !important; }
@include md {
    .#{$ns}mb0-m { margin-bottom: 0 !important; }
    .#{$ns}m0-m { margin: 0 !important; }
    .#{$ns}mxauto-m, .#{$ns}mxa-m {
        margin-left: auto !important;
        margin-right: auto !important;
    }
    .#{$ns}mi-m { margin: inherit !important; }
}
@include md-lg {
    .#{$ns}mb0-ml { margin-bottom: 0 !important; }
    .#{$ns}m0-ml { margin: 0 !important; }
    .#{$ns}mxauto-ml, .#{$ns}mxa-ml {
        margin-left: auto !important;
        margin-right: auto !important;
    }
    .#{$ns}mi-ml { margin: inherit !important; }
}
@include lg {
    .#{$ns}mb0-l { margin-bottom: 0 !important; }
    .#{$ns}m0-l { margin: 0 !important; }
    .#{$ns}mxauto-l, .#{$ns}mxa-l {
        margin-left: auto !important;
        margin-right: auto !important;
    }
    .#{$ns}mi-l { margin: inherit !important; }
}

// multi margin
@for $i from 1 through $_spaces_count {
    @include _multi_whitespace_margin_css( $i );
}
@include md { @for $i from 1 through $_spaces_count {
    @include _multi_whitespace_margin_css( $i, '-m' );
}}
@include md-lg { @for $i from 1 through $_spaces_count {
    @include _multi_whitespace_margin_css( $i, '-ml' );
}}
@include lg { @for $i from 1 through $_spaces_count {
    @include _multi_whitespace_margin_css( $i, '-l' );
}}

// margin
@for $i from 1 through $_spaces_count {
    @include _whitespace_margin_css( $i );
}
@include md { @for $i from 1 through $_spaces_count {
    @include _whitespace_margin_css( $i, '-m' );
}}
@include md-lg { @for $i from 1 through $_spaces_count {
    @include _whitespace_margin_css( $i, '-ml' );
}}
@include lg { @for $i from 1 through $_spaces_count {
    @include _whitespace_margin_css( $i, '-l' );
}}

/*
Padding
*/

.#{$ns}p0 { padding: 0 !important; }
.#{$ns}pi { padding: inherit !important; }
@include md {
    .#{$ns}p0-m { padding: 0 !important; }
    .#{$ns}pi-m { padding: inherit !important; }
}
@include md-lg {
    .#{$ns}p0-ml { padding: 0 !important; }
    .#{$ns}pi-ml { padding: inherit !important; }
}
@include lg {
    .#{$ns}p0-l { padding: 0 !important; }
    .#{$ns}pi-l { padding: inherit !important; }
}

// multi padding
@for $i from 1 through $_spaces_count {
    @include _multi_whitespace_padding_css( $i );
}
@include md { @for $i from 1 through $_spaces_count {
    @include _multi_whitespace_padding_css( $i, '-m' );
}}
@include md-lg { @for $i from 1 through $_spaces_count {
    @include _multi_whitespace_padding_css( $i, '-ml' );
}}
@include lg { @for $i from 1 through $_spaces_count {
    @include _multi_whitespace_padding_css( $i, '-l' );
}}

// padding
@for $i from 1 through $_spaces_count {
    @include _whitespace_padding_css( $i );
}
@include md { @for $i from 1 through $_spaces_count {
    @include _whitespace_padding_css( $i, '-m' );
}}
@include md-lg { @for $i from 1 through $_spaces_count {
    @include _whitespace_padding_css( $i, '-ml' );
}}
@include lg { @for $i from 1 through $_spaces_count {
    @include _whitespace_padding_css( $i, '-l' );
}}

} // endif
