@charset "UTF-8";

///
// Burger
//
// jQuery(document).ready(function($) {
//     "use strict";
//     $('.burger').click(function(){
//         $(this).toggleClass('active');
//     });
// });
//
// .burger {
//     @include burger((
//         'padding' : 20px,
//         'color' : #ccc,
//     ));
//     &.active {
//         @include burger-to-cross;
//     }
// }
//
// <a class="burger" href="#">
//     <span></span>
// </a>
///

@mixin burger( $args ) {

    $args: map-merge( (
        'width'   : 24px,
        'height'  : 20px,
        'gutter'  : 3px,
        'color'   : #000,
        'speed'   : .3s,
        'padding' : 10px,
    ), $args );

    $width: map-get($args,'width');
    $height: map-get($args,'height');
    $gutter: map-get($args,'gutter');
    $color: map-get($args,'color');
    $speed: map-get($args,'speed');
    $padding: map-get($args,'padding');

    $padding: if( $padding == 0, 0px, $padding );

    $layer_height: round(($height - ($gutter * 2)) / 3);

    $new_height: ($layer_height * 3) + ($gutter * 2);
    $dif: $height - $new_height;
    @if $new_height > $height {
        $dif: $new_height - $height;
    }

    $burger_layer_height: $layer_height !global;
    $burger_gutter: $gutter !global;

    display: block;
    height: $height;
    width: $width;
    background-color: yellow;
    @if $padding and 0px != $padding {
        $padding_x: $padding + ($width / 2);
        $padding_y: $padding + ($height / 2);
        padding: $padding_y $padding_x;
        @if $new_height > $height {
            padding-bottom: $padding_y + $dif;
        } @else {
            padding-bottom: $padding_y - $dif;
        }
    }

    > * {
        position: relative;
        margin-top: $layer_height + $gutter;
        margin-bottom: $layer_height + $gutter;
        -webkit-user-select: none;
           -moz-user-select: none;
            -ms-user-select: none;
                user-select: none;
        top: $layer_height + $gutter;
        @if $padding and 0px != $padding {
            top: -($height / 2);
            left: -($width / 2);
        }

        &, &::before, &::after {
            display: block;
            width: $width;
            height: $layer_height;
            background-color: $color;
            transition-duration: $speed;
            -webkit-transition-property: background-color, -webkit-transform;
               -moz-transition-property: background-color, -moz-transform;
                    transition-property: background-color, transform;
        }

        &::before, &::after {
            position: absolute;
            content: '';
        }

        &::before {
            top: -($layer_height + $gutter);
        }

        &::after {
            top: $layer_height + $gutter;
        }
    }
}

// Select parts of the burger
@mixin burger-parts {
    > *,
    > *::before,
    > *::after {
        @content;
    }
}

@mixin burger-top {
    > *::before {
        @content;
    }
}

@mixin burger-middle {
    > * {
        @content;
    }
}

@mixin burger-bottom {
    > *::after {
        @content;
    }
}


// Burger animations
@mixin burger-to-cross() {
    > * {
        & {
            background-color: transparent;
        }
        &::before {
            -webkit-transform: translateY( $burger_gutter + $burger_layer_height ) rotate(45deg);
               -moz-transform: translateY( $burger_gutter + $burger_layer_height ) rotate(45deg);
                -ms-transform: translateY( $burger_gutter + $burger_layer_height ) rotate(45deg);
                 -o-transform: translateY( $burger_gutter + $burger_layer_height ) rotate(45deg);
                    transform: translateY( $burger_gutter + $burger_layer_height ) rotate(45deg);
        }
        &::after {
            -webkit-transform: translateY( -($burger_gutter + $burger_layer_height) ) rotate(-45deg);
               -moz-transform: translateY( -($burger_gutter + $burger_layer_height) ) rotate(-45deg);
                -ms-transform: translateY( -($burger_gutter + $burger_layer_height) ) rotate(-45deg);
                 -o-transform: translateY( -($burger_gutter + $burger_layer_height) ) rotate(-45deg);
                    transform: translateY( -($burger_gutter + $burger_layer_height) ) rotate(-45deg);
        }
    }
}
