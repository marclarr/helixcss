@charset "UTF-8";

///
// Custom Media Queries
///

@mixin above( $min ) {
    @media only screen and (min-width: $min) { @content; }
}
@mixin below( $max ) {
    @media only screen and (max-width: $max) { @content; }
}
@mixin between( $min, $max ) {
    @media only screen and (min-width: $min) and (max-width: $max) { @content; }
}

///
// Shorthand Queries
///

@mixin sm { @include below($md_begin - 1) { @content; } }
@mixin md { @include between($md_begin, $lg_begin - 1) { @content; } }
@mixin lg { @include above($lg_begin) { @content; } }

@mixin sm-md { @include below($lg_begin - 1) { @content; } }
@mixin md-lg { @include above($md_begin) { @content; } }

///
// Retina Queries
// Default value set to 1.3 to target Google Nexus 7 (bjango.com/articles/min-device-pixel-ratio/)
///

@mixin retina( $ratio:1.3 ) {
    @media only screen and ( -webkit-min-device-pixel-ratio: $ratio ),
           only screen and (    min--moz-device-pixel-ratio: $ratio ),
           only screen and (      -o-min-device-pixel-ratio: #{$ratio}/1 ),
           only screen and ( min-resolution: round($ratio * 96dpi) ),
           only screen and ( min-resolution: $ratio * 1dppx ) {
               @content;
           }
}

@mixin retina-bg( $url, $width, $height ) {
    @include retina {
        background-image: url($url);
        background-size: $width $height;
    }
}

///
// Justify Single Line
// Because a simple text-align: justify; won't justify one-liners. This mixin does.
///

@mixin justify-line( $clearfix:true ) {
    text-align: justify;
    text-justify: distribute-all-lines;
    @if $clearfix {
        &:after {
            content: '';
            display: inline-block;
            width: 100%;
        }
    }
}

///
// Background Clip â€“ Just here for reference.
// Helps with leaking background-colors and images when using border-radius;
///

@mixin background-clip {
    background-clip: padding-box;
}

///
// Text Shadow
// Quickly set a simple black or white text-shadow.
///

@mixin dark-text-shadow( $alpha: 0.25, $x_y_blur: 1px 1px 1px ) {
    text-shadow: $x_y_blur rgba(0, 0, 0, $alpha);
}

@mixin light-text-shadow( $alpha: 0.25, $x_y_blur: 1px 1px 1px ) {
    text-shadow: $x_y_blur rgba(255, 255, 255, $alpha);
}

///
// List reset
///

@mixin list-reset {
    list-style: none;
    padding-left: 0;
}

@mixin list-reset-deep {
    &, & ul, & ol, {
        list-style: none;
        padding-left: 0;
    }
}

///
// Centering
// This needs to be within a non static positioned parent.
///

@mixin center-absolute( $x:50%, $y:50% ) {
    $x_flipped: $x;
    $y_flipped: $y;

    @if $x > 0 { $x_flipped: -$x; }
    @if $y > 0 { $y_flipped: -$y; }

    position: absolute;
    left: $x; top: $y;
    transform: translate( $x_flipped, $y_flipped );
}

///
// Cover Screen
///

@mixin cover-screen {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999999999;
}

///
// Striped Table
// table { @include table-striped(#eee); }
///

@mixin table-striped( $stripe_color ) {
    tbody tr:nth-of-type(odd){
        background-color: $stripe_color;
    }
}

///
// Hide
// Hides an element but keeps it focusable. Good for hidding form elements like checkboxes, etc.
// @link http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
// @link https://css-tricks.com/almanac/properties/c/clip/
// @notes:
// - inset-rectangle() may replace inset()
// - rectangle() coming in SVG 2
///

@mixin hide {
    position: absolute !important; // required by clip
    overflow: hidden;
    height: 1px; width: 1px;
    clip: rect(1px, 1px, 1px, 1px); // depricated
    // chrome 24+, safari 8+, opera 15+
    -webkit-clip-path: inset(1px 1px 1px 1px);
            clip-path: inset(1px 1px 1px 1px);
}

///
// Hide Text - Good for image replacement.
///

@mixin hide-text {
    overflow: hidden;
    text-indent: 101%;
    white-space: nowrap;
}

///
// Truncate
// Prevents a string of text from breaking into the 2nd line and adds an ellipsis to the end.
///

@mixin truncate( $width:100% ) {
    max-width: 100%;
    width: $width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// alias
@mixin ellipsis( $width:100% ) {
    @include truncate( $width );
}

///
// Creates specific vendor prefixes.
///

// Do NOT edit these global variables!
$is_webkit_included: true;
$is_mozilla_included: true;
$is_microsoft_included: true;
$is_opera_included: true;
$is_spec_included: true;

@mixin disable-all-vendors {
    $is_webkit_included: false !global;
    $is_mozilla_included: false !global;
    $is_microsoft_included: false !global;
    $is_opera_included: false !global;
    $is_spec_included: false !global;
}

@mixin enable-all-vendors {
    $is_webkit_included: true !global;
    $is_mozilla_included: true !global;
    $is_microsoft_included: true !global;
    $is_opera_included: true !global;
    $is_spec_included: true !global;
}

@mixin prefixer( $property, $value, $prefixes:null ) {

    @if null == $prefixes { $prefixes: webkit moz ms o spec; }

    @each $p in $prefixes {
        @if webkit == $p {
            @if $is_webkit_included { -webkit-#{$property}: $value; }
        } @else if moz == $p {
            @if $is_mozilla_included { -moz-#{$property}: $value; }
        } @else if ms == $p {
            @if $is_microsoft_included { -ms-#{$property}: $value; }
        } @else if o == $p {
            @if $is_opera_included { -o-#{$property}: $value; }
        } @else if spec == $p {
            @if $is_spec_included { #{$property}: $value; }
        } @else {
            @warn "Unrecognized prefix: #{$p}";
        }
    }
}

// github.com/jordiesaenz/palette-town
@mixin palette-town($color, $type) {
  $color-primary: $color !global;
  $color-primary-darkest: desaturate(darken($color-primary, 45%), 15%) !global;
  $color-primary-darker: desaturate(darken($color-primary, 30%), 15%) !global;
  $color-primary-dark: desaturate(darken($color-primary, 15%), 15%) !global;
  $color-primary-light: saturate(lighten($color-primary, 15%), 15%) !global;
  $color-primary-lighter: saturate(lighten($color-primary, 30%), 15%) !global;
  $color-primary-lightest: saturate(lighten($color-primary, 45%), 15%) !global;
  @if $type == complement or complementary {
    $color-complement: mix($color-primary, complement($color), 15%) !global;
    $color-complement-darkest: desaturate(darken($color-complement, 45%), 15%) !global;
    $color-complement-darker: desaturate(darken($color-complement, 30%), 15%) !global;
    $color-complement-dark: desaturate(darken($color-complement, 15%), 15%) !global;
    $color-complement-light: saturate(lighten($color-complement, 15%), 15%) !global;
    $color-complement-lighter: saturate(lighten($color-complement, 30%), 15%) !global;
    $color-complement-lightest: saturate(lighten($color-complement, 45%), 15%) !global;
  }
  @if $type == triad {
    $color-triad-1: $color-primary !global;
    $color-triad-1-darkest: $color-primary-darkest !global;
    $color-triad-1-darker: $color-primary-darker !global;
    $color-triad-1-dark: $color-primary-dark !global;
    $color-triad-1-light: $color-primary-light !global;
    $color-triad-1-lighter: $color-primary-lighter !global;
    $color-triad-1-lightest: $color-primary-lightest !global;
    $color-triad-2: mix($color-primary, adjust-hue($color, 120deg), 15%) !global;
    $color-triad-2-darkest: desaturate(darken($color-triad-2, 45%), 15%) !global;
    $color-triad-2-darker: desaturate(darken($color-triad-2, 30%), 15%) !global;
    $color-triad-2-dark: desaturate(darken($color-triad-2, 15%), 15%) !global;
    $color-triad-2-light: saturate(lighten($color-triad-2, 15%), 15%) !global;
    $color-triad-2-lighter: saturate(lighten($color-triad-2, 30%), 15%) !global;
    $color-triad-2-lightest: saturate(lighten($color-triad-2, 45%), 15%) !global;
    $color-triad-3: mix($color-primary, adjust-hue($color, 240deg), 15%) !global;
    $color-triad-3-darkest: desaturate(darken($color-triad-3, 45%), 15%) !global;
    $color-triad-3-darker: desaturate(darken($color-triad-3, 30%), 15%) !global;
    $color-triad-3-dark: desaturate(darken($color-triad-3, 15%), 15%) !global;
    $color-triad-3-light: saturate(lighten($color-triad-3, 15%), 15%) !global;
    $color-triad-3-lighter: saturate(lighten($color-triad-3, 30%), 15%) !global;
    $color-triad-3-lightest: saturate(lighten($color-triad-3, 45%), 15%) !global;
  }
  @if $type == tetrad {
    $color-tetrad-1: $color-primary !global;
    $color-tetrad-1-darkest: $color-primary-darkest !global;
    $color-tetrad-1-darker: $color-primary-darker !global;
    $color-tetrad-1-dark: $color-primary-dark !global;
    $color-tetrad-1-light: $color-primary-light !global;
    $color-tetrad-1-lighter: $color-primary-lighter !global;
    $color-tetrad-1-lightest: $color-primary-lightest !global;
    $color-tetrad-2: mix($color-primary, adjust-hue($color, 60deg), 15%) !global;
    $color-tetrad-2-darkest: desaturate(darken($color-tetrad-2, 45%), 15%) !global;
    $color-tetrad-2-darker: desaturate(darken($color-tetrad-2, 30%), 15%) !global;
    $color-tetrad-2-dark: desaturate(darken($color-tetrad-2, 15%), 15%) !global;
    $color-tetrad-2-light: saturate(lighten($color-tetrad-2, 15%), 15%) !global;
    $color-tetrad-2-lighter: saturate(lighten($color-tetrad-2, 30%), 15%) !global;
    $color-tetrad-2-lightest: saturate(lighten($color-tetrad-2, 45%), 15%) !global;
    $color-complement: mix($color-primary, complement($color), 15%) !global;
    $color-complement-darkest: desaturate(darken($color-complement, 45%), 15%) !global;
    $color-complement-darker: desaturate(darken($color-complement, 30%), 15%) !global;
    $color-complement-dark: desaturate(darken($color-complement, 15%), 15%) !global;
    $color-complement-light: saturate(lighten($color-complement, 15%), 15%) !global;
    $color-complement-lighter: saturate(lighten($color-complement, 30%), 15%) !global;
    $color-complement-lightest: saturate(lighten($color-complement, 45%), 15%) !global;
    $color-tetrad-3: $color-complement !global;
    $color-tetrad-3-darkest: $color-complement-darkest !global;
    $color-tetrad-3-darker: $color-complement-darker !global;
    $color-tetrad-3-dark: $color-complement-dark !global;
    $color-tetrad-3-light: $color-complement-light !global;
    $color-tetrad-3-lighter: $color-complement-lighter !global;
    $color-tetrad-3-lightest: $color-complement-lightest !global;
    $color-tetrad-4: mix($color-primary, adjust-hue($color, 270deg), 15%) !global;
    $color-tetrad-4-darkest: desaturate(darken($color-tetrad-4, 45%), 15%) !global;
    $color-tetrad-4-darker: desaturate(darken($color-tetrad-4, 30%), 15%) !global;
    $color-tetrad-4-dark: desaturate(darken($color-tetrad-4, 15%), 15%) !global;
    $color-tetrad-4-light: saturate(lighten($color-tetrad-4, 15%), 15%) !global;
    $color-tetrad-4-lighter: saturate(lighten($color-tetrad-4, 30%), 15%) !global;
    $color-tetrad-4-lightest: saturate(lighten($color-tetrad-4, 45%), 15%) !global;
  }
  @if $type == split or split-compliment {
    $color-split-1: mix($color-primary, adjust-hue($color, 150deg), 15%) !global;
    $color-split-1-darkest: desaturate(darken($color-split-1, 45%), 15%) !global;
    $color-split-1-darker: desaturate(darken($color-split-1, 30%), 15%) !global;
    $color-split-1-dark: desaturate(darken($color-split-1, 15%), 15%) !global;
    $color-split-1-light: saturate(lighten($color-split-1, 15%), 15%) !global;
    $color-split-1-lighter: saturate(lighten($color-split-1, 30%), 15%) !global;
    $color-split-1-lightest: saturate(lighten($color-split-1, 45%), 15%) !global;
    $color-split-2: mix($color-primary, adjust-hue($color, 210deg), 15%) !global;
    $color-split-2-darkest: desaturate(darken($color-split-2, 45%), 15%) !global;
    $color-split-2-darker: desaturate(darken($color-split-2, 30%), 15%) !global;
    $color-split-2-dark: desaturate(darken($color-split-2, 15%), 15%) !global;
    $color-split-2-light: saturate(lighten($color-split-2, 15%), 15%) !global;
    $color-split-2-lighter: saturate(lighten($color-split-2, 30%), 15%) !global;
    $color-split-2-lightest: saturate(lighten($color-split-2, 45%), 15%) !global;
  }
  @if $type == shades or shade {
    $color-shade: desaturate($color-primary, 75%) !global;
    $color-shade-darkest: darken($color-shade, 45%) !global;
    $color-shade-darker: darken($color-shade, 30%) !global;
    $color-shade-dark: darken($color-shade, 15%) !global;
    $color-shade-light: lighten($color-shade, 15%) !global;
    $color-shade-lighter: lighten($color-shade, 30%) !global;
    $color-shade-lightest: lighten($color-shade, 45%) !global;
  }
  @if $type == all {
    @include palette-town($color, complement);
    @include palette-town($color, triad);
    @include palette-town($color, tetrad);
    @include palette-town($color, split);
    @include palette-town($color, shades);
  }
}
